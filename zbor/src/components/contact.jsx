import React, { Component } from "react";

import { TextField, Button, Card } from "@material-ui/core";
import { IconButton } from "@material-ui/core";

import swal from "sweetalert";

import "./../styles/contribute.css";
import "./../styles/contact.css";
import { queryFetch } from "../js/common";

import GitHubIcon from '@material-ui/icons/GitHub';
import GradeIcon from '@material-ui/icons/Grade';
import StorageIcon from '@material-ui/icons/Storage';

class Contact extends Component {
    state = {
        contact: "",
    };

    componentDidMount() {
        if (typeof this.props.onMount == "function") this.props.onMount();

        let memoryMessage = localStorage.getItem("contactMessage");
        if (memoryMessage) {
            if (memoryMessage.length > 10) {
                this.setState({ contact: memoryMessage });
            }
        }
    }

    render() {
        return (
            <div class="contribute-container center-vh">
                <Card elevation={0}>
                    <div class="card-padding">
                        <div class="github-text">
                            –ó–ë–û–† –µ –º–∞–ª–∞ –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∞ —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞ –∑–±–æ—Ä–æ–≤–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –æ–¥ –º–∞–∫–µ–¥–æ–Ω—Å–∫–∞—Ç–∞ –í–∏–∫–∏–ø–µ–¥–∏—ò–∞. –¢–∞–∞ —Å–µ —Å—Ç—Ä–µ–º–∏ –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏ –ø—Ä–≤–∏–æ—Ç –º–∞–∫–µ–¥–æ–Ω—Å–∫–∏ —Ä–µ—á–Ω–∏–∫ —Å–æ –æ—Ç–≤–æ—Ä–µ–Ω –∏–∑–≤–æ—Ä.
                        </div>
                        <div class="icon-container">
                            <div class="github-icon">
                                <IconButton onClick={() => {
                                        window.location = "https://schoolnet.mk";
                                    }} >
                                    <GradeIcon fontSize="large"/>
                                </IconButton>
                            </div>
                        </div>
                    </div>
                </Card>

                <div class="separator"/>

                <form noValidate autoComplete="off">
                    <TextField
                        id="contact-input"
                        label="–ò–º–∞–º –Ω–µ—à—Ç–æ –Ω–∞ —É–º..."
                        variant="filled"
                        multiline
                        rowsMax="4"
                        helperText={"0/300"}
                        inputProps={{
                            maxLength: 300,
                        }}
                        onChange={(e) => {
                            let helperText = document.getElementById(
                                "contact-input-helper-text"
                            );
                            let inputField = document.getElementById(
                                "contact-input"
                            );

                            let count = inputField.value.length;

                            if (count > 300) {
                                count = 300;
                            }

                            this.setState({ contact: e.target.value });

                            helperText.innerHTML = count + "/300";
                        }}
                    />
                </form>

                <div id="submit-button-container">
                    <div id="submit-button" class="center-vh">
                        <Button
                            variant="contained"
                            color="primary"
                            disableElevation
                            onClick={() => {
                                queryFetch({
                                    command: "contact",
                                    data: {
                                        message: this.state.contact
                                    },
                                }).then((data) => {
                                    if (data.status === "success") {
                                        swal(
                                            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º–µ —à—Ç–æ –Ω√® –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞–≤—Ç–µ! üéâ",
                                            "–í–∞—à–∞—Ç–∞ –ø–æ—Ä–∞–∫–∞ —ú–µ –±–∏–¥–µ —Ä–∞–∑–≥–ª–µ–¥–∞–Ω–∞ –æ–¥ —Å—Ç—Ä–∞–Ω–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ—Ç –≤–æ –Ω–∞—ò–±—Ä–∑–æ –≤—Ä–µ–º–µ. –å–µ –≤–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞–º–µ.",
                                            "success"
                                        );
                                    } else if (data.status === "error") {
                                        if (data.message === "limit") {
                                            swal(
                                                "–ñ–∞–ª–∞–º üòü",
                                                "–ù–µ –¥–æ–∑–≤–æ–ª—É–≤–∞–º–µ —Ç–æ–ª–∫—É —á–µ—Å—Ç–æ –¥–∞ –Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞—Ç–µ –ø–æ—Ä–∞–¥–∏ –±–µ–∑–±–µ–¥–Ω–æ—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏. –û–±–∏–¥–µ—Ç–µ —Å–µ –∑–∞ —Å–∞–∞—Ç –≤—Ä–µ–º–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ê –Ω–∏–µ —ú–µ –≤–∏ —ò–∞ —á—É–≤–∞–º–µ –ø–æ—Ä–∞–∫–∞—Ç–∞ –Ω–∞ –æ–≤–∞ –∏—Å—Ç–æ –º–µ—Å—Ç–æ. üìù",
                                                "success"
                                            );
                                            
                                            localStorage.setItem('contactMessage', this.state.contact);
                                        }
                                    }
                                });
                            }}
                        >
                            –¢–û–õ–ö–£ –ó–ê –°–ï–ì–ê.
                        </Button>
                    </div>
                </div>
                
                <div class="separator"/>

                <Card elevation={0}>
                    <div class="card-padding">
                        <div class="github-text">
                            –ù–∞—à–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ —Å–µ —Å–æ –æ—Ç–≤–æ—Ä–µ–Ω –∏–∑–≤–æ—Ä (Open Source). –°–µ–∫–æ—ò –ø—Ä–∏–¥–æ–Ω–µ—Å –ø—Ä–∞–≤–∏ –≥–æ–ª–µ–º–∞ —Ä–∞–∑–ª–∏–∫–∞.
                        </div>
                        <div class="icon-container">
                            <div class="github-icon">
                                <IconButton onClick={() => {
                                        window.location = "https://github.com/mitkonikov/SchoolNet";
                                    }} >
                                    <GitHubIcon fontSize="large"/>
                                </IconButton>
                            </div>
                        </div>
                    </div>
                </Card>

                <div class="separator"/>

                <Card elevation={0}>
                    <div class="card-padding">
                        <div class="github-text">
                            –í–æ —Å–∫–æ—Ä–æ –≤—Ä–µ–º–µ, –ó–ë–û–† —ú–µ –∏–º –¥–æ–∑–≤–æ–ª–∏ –Ω–∞ —Å–∏—Ç–µ –¥–∞ –≥–æ —Å–∏–º–Ω–∞—Ç —Ü–µ–ª–∏–æ—Ç —Ä–µ—á–Ω–∏–∫ –ø—Ä–∏–¥–æ–Ω–µ—Å—É–≤–∞—ò—ú–∏ –∑–∞ —Ä–∞–∑–≤–∏—Ç–æ–∫–æ—Ç –Ω–∞ —ò–∞–∑–∏–∫–æ—Ç.
                        </div>
                        <div class="icon-container">
                            <div class="github-icon">
                                <IconButton onClick={() => {
                                        window.location = "https://schoolnet.mk";
                                    }} >
                                    <StorageIcon fontSize="large"/>
                                </IconButton>
                            </div>
                        </div>
                    </div>
                </Card>

                <div class="separator"/>

                <div class="caption-container">
                    <span class="small-link" onClick={() => window.location.href = "https://schoolnet.mk/client/common/privacypolicy.html"}>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç</span>
                    <span class="small-link" onClick={() => window.location.href = "https://schoolnet.mk/client/common/termsofuse.html"}>–£—Å–ª–æ–≤–∏</span>
                </div>
            </div>
        );
    }
}

export default Contact;
